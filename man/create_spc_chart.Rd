% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_spc_chart.R
\name{create_spc_chart}
\alias{create_spc_chart}
\title{Create SPC Chart - High-Level Convenience Function}
\usage{
create_spc_chart(
  data,
  x,
  y,
  n = NULL,
  chart_type = "run",
  y_axis_unit = "count",
  chart_title = NULL,
  target_value = NULL,
  target_text = NULL,
  notes = NULL,
  part = NULL,
  freeze = NULL,
  exclude = NULL,
  cl = NULL,
  multiply = 1,
  agg.fun = c("mean", "median", "sum", "sd"),
  base_size = 14,
  width = NULL,
  height = NULL,
  units = NULL,
  dpi = 96,
  plot_margin = NULL,
  ylab = "",
  xlab = "",
  subtitle = NULL,
  caption = NULL,
  return.data = FALSE,
  print.summary = FALSE
)
}
\arguments{
\item{data}{Data frame with measurements}

\item{x}{Name of x-axis column (unquoted, NSE). Usually date/time column.}

\item{y}{Name of y-axis column (unquoted, NSE). The measurement variable.}

\item{n}{Name of denominator column for ratio charts (optional, unquoted, NSE)}

\item{chart_type}{Chart type: "run", "i", "p", "c", "u", "xbar", "s", "t", "g"}

\item{y_axis_unit}{Unit type: "count", "percent", "rate", or "time"}

\item{chart_title}{Plot title (optional)}

\item{target_value}{Numeric target value (optional)}

\item{target_text}{Target label text (optional)}

\item{notes}{Character vector of annotations for data points (optional, same length as data)}

\item{part}{Positions for phase splits (optional numeric vector)}

\item{freeze}{Position to freeze baseline (optional integer)}

\item{exclude}{Integer vector of data point positions to exclude from calculations (optional)}

\item{cl}{Numeric value to set a custom centerline instead of calculating from data (optional)}

\item{multiply}{Numeric multiplier for y-axis values, e.g. 100 to convert proportions to percentages (default: 1)}

\item{agg.fun}{Aggregation function for run/I charts with multiple observations per subgroup: "mean" (default), "median", "sum", "sd"}

\item{base_size}{Base font size in points (default: auto-calculated from width/height if provided, otherwise 14)}

\item{width}{Plot width (optional). Supports smart unit detection or explicit units parameter. See Details.}

\item{height}{Plot height (optional). Supports smart unit detection or explicit units parameter. See Details.}

\item{units}{Unit type for width/height: "cm" (centimeters), "mm" (millimeters), "in" (inches), "px" (pixels), or NULL for smart auto-detection (default)}

\item{dpi}{Dots per inch for pixel conversion (default: 96). Only used when units = "px"}

\item{plot_margin}{Plot margins as either: (1) numeric vector c(top, right, bottom, left) in mm, or (2) ggplot2::margin() object. Default NULL uses BFHtheme defaults.}

\item{ylab}{Y-axis label (default: "" for blank)}

\item{xlab}{X-axis label (default: "" for blank)}

\item{subtitle}{Plot subtitle text (default: NULL for no subtitle)}

\item{caption}{Plot caption text (default: NULL for no caption)}

\item{return.data}{Logical. If TRUE, return the raw qic data frame instead of ggplot. If FALSE (default), return ggplot object. Can be combined with print.summary.}

\item{print.summary}{Logical. If TRUE, return formatted summary statistics. When combined with return.data, returns list(data, summary). When alone, returns list(plot, summary). Default FALSE returns only plot.}
}
\value{
\itemize{
\item Default (return.data = FALSE, print.summary = FALSE): ggplot2 object
\item return.data = TRUE: data.frame with qic calculations
\item print.summary = TRUE: list(plot = ggplot, summary = data.frame)
\item Both TRUE: list(data = data.frame, summary = data.frame)
}
}
\description{
One-function approach to create publication-ready SPC charts.
Wraps qicharts2 calculation and BFH visualization in a single call.

Convenience function that combines qicharts2::qic() calculation with
BFH-styled visualization and automatic label placement. Handles the
entire workflow from raw data to finished plot with intelligent labels.
}
\details{
\strong{Chart Types:}
\itemize{
\item \strong{run}: Run chart (no control limits)
\item \strong{i}: I-chart (individuals)
\item \strong{p}: P-chart (proportions, requires n)
\item \strong{c}: C-chart (counts)
\item \strong{u}: U-chart (rates, requires n)
\item \strong{xbar}: X-bar chart
\item \strong{s}: S-chart
\item \strong{t}: T-chart (time between events)
\item \strong{g}: G-chart (geometric)
}

\strong{Y-Axis Units:}
\itemize{
\item \strong{count}: Integer counts with K/M notation
\item \strong{percent}: Percentage values (0-100\%)
\item \strong{rate}: Decimal values with comma notation
\item \strong{time}: Context-aware minutes/hours/days
}

\strong{Phase Configuration:}
\itemize{
\item \code{part}: Vector of positions where phase splits occur (e.g., \code{c(12, 24)})
\item \code{freeze}: Position to freeze baseline calculation
}

\strong{Unit Support (Danish-friendly):}
Width and height support multiple units for convenience:
\itemize{
\item \strong{Smart auto-detection} (default, \code{units = NULL}):
\itemize{
\item Values > 100 → pixels (e.g., \code{width = 800} → 800px)
\item Values 10-100 → centimeters (e.g., \code{width = 25} → 25cm)
\item Values < 10 → inches (e.g., \code{width = 10} → 10in, legacy)
}
\item \strong{Explicit units} (\code{units = "cm"}, \code{"mm"}, \code{"in"}, \code{"px"}):
\itemize{
\item Centimeters: \verb{width = 25, height = 15, units = "cm"} (Danish standard)
\item Millimeters: \verb{width = 250, height = 150, units = "mm"}
\item Inches: \verb{width = 10, height = 6, units = "in"} (legacy)
\item Pixels: \verb{width = 800, height = 600, units = "px", dpi = 96} (web/Shiny)
}
}

\strong{Responsive Typography:}
When \code{width} and \code{height} are provided, \code{base_size} is automatically
calculated using geometric mean: \verb{sqrt(width × height) / 3.5}
This ensures fonts scale proportionally with plot size.
Override by explicitly setting \code{base_size}.

\strong{Automatic Label Placement:}
Labels are automatically added to the plot showing:
\itemize{
\item Current level (CL) from the most recent phase
\item Target value (if specified via \code{target_value} or \code{target_text})
\item Intelligent collision avoidance with multi-level fallback strategy
\item Provide \code{width} and \code{height} for optimal label sizing and placement
}

\strong{Arrow Symbol Suppression:}
If \code{target_text} contains arrow symbols (↑ ↓ or < >), the target line will be
suppressed and only the directional indicator shown at the plot edge.
}
\examples{
\dontrun{
library(BFHcharts)

# Example 1: Simple run chart with monthly data
data <- data.frame(
  month = seq(as.Date("2024-01-01"), by = "month", length.out = 24),
  infections = rpois(24, lambda = 15),
  surgeries = rpois(24, lambda = 100)
)

plot <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "run",
  y_axis_unit = "count",
  chart_title = "Monthly Hospital-Acquired Infections"
)
plot

# Example 2: P-chart with target line
plot <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  n = surgeries,
  chart_type = "p",
  y_axis_unit = "percent",
  chart_title = "Infection Rate per 100 Surgeries",
  target_value = 2.0,
  target_text = "↓ Målet: 2\%"
)
plot

# Example 3: I-chart with phase splits
plot <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Infections with Intervention",
  part = c(12), # Phase split after 12 months
  freeze = 12 # Freeze baseline at month 12
)
plot

# Example 4: Chart with annotations using notes
notes_vec <- rep(NA, 24)
notes_vec[3] <- "Start of intervention"
notes_vec[12] <- "New protocol implemented"
notes_vec[18] <- "Staff training completed"

plot <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Infections with Annotated Events",
  notes = notes_vec
)
plot

# Example 5: Responsive typography with viewport dimensions
# Small plot (6×4 inches) → base_size ≈ 14pt
plot_small <- create_spc_chart(
  data = data, x = month, y = infections,
  chart_type = "i", y_axis_unit = "count",
  chart_title = "Small Plot - Auto Scaled Typography",
  width = 6, height = 4  # Auto: base_size ≈ 14pt
)

# Medium plot (10×6 inches) → base_size ≈ 22pt
plot_medium <- create_spc_chart(
  data = data, x = month, y = infections,
  chart_type = "i", y_axis_unit = "count",
  chart_title = "Medium Plot - Auto Scaled Typography",
  width = 10, height = 6  # Auto: base_size ≈ 22pt
)

# Large plot (16×9 inches) → base_size ≈ 34pt
plot_large <- create_spc_chart(
  data = data, x = month, y = infections,
  chart_type = "i", y_axis_unit = "count",
  chart_title = "Large Plot - Auto Scaled Typography",
  width = 16, height = 9  # Auto: base_size ≈ 34pt
)

# Override auto-scaling with explicit base_size
plot_custom <- create_spc_chart(
  data = data, x = month, y = infections,
  chart_type = "i", y_axis_unit = "count",
  chart_title = "Custom Typography Override",
  width = 10, height = 6,
  base_size = 18  # Explicit override
)

# Example 6: Exclude outliers from calculations
plot_exclude <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "I-Chart with Excluded Outliers",
  exclude = c(3, 15)  # Exclude data points 3 and 15
)

# Example 7: Use median instead of mean for aggregation
plot_median <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "I-Chart Using Median",
  agg.fun = "median"
)

# Example 8: Multiply y-values for unit conversion
# Convert proportions (0-1) to percentages (0-100)
data_prop <- data.frame(
  month = seq(as.Date("2024-01-01"), by = "month", length.out = 24),
  proportion = runif(24, 0.01, 0.05)  # Proportions 0.01-0.05
)

plot_multiply <- create_spc_chart(
  data = data_prop,
  x = month,
  y = proportion,
  chart_type = "i",
  y_axis_unit = "percent",
  chart_title = "Proportions Converted to Percentages",
  multiply = 100  # Convert 0.01 → 1\%
)

# Example 9: Custom centerline (cl parameter)
# Use a fixed benchmark or standard instead of calculating from data
plot_cl <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Infections with Custom Centerline",
  cl = 10  # Set centerline to fixed benchmark of 10
)

# Example 10: Custom plot margins (numeric vector in mm)
plot_tight <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Chart with Tight Margins",
  plot_margin = c(2, 2, 2, 2)  # 2mm on all sides
)

# Example 11: Custom margins with margin() object
plot_custom_margin <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Chart with Custom Margins",
  plot_margin = ggplot2::margin(t = 5, r = 15, b = 5, l = 10, unit = "mm")
)

# Example 12: Responsive margins using lines (scales with base_size)
plot_responsive <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  base_size = 18,
  plot_margin = ggplot2::margin(t = 0.5, r = 1, b = 0.5, l = 1, unit = "lines")
)

# Example 13: Custom axis labels, subtitle, and caption
plot_labels <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Hospital-Acquired Infections",
  ylab = "Antal infektioner",
  xlab = "Måned",
  subtitle = "Kirurgisk afdeling - 2024",
  caption = "Data: EPJ system | Analyse: Kvalitetsafdelingen"
)

# Example 14: Add BFHtheme branding (hospital logo, custom styling)
plot_branded <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Hospital-Acquired Infections - Official Report",
  base_size = 14
) |>
  BFHtheme::add_logo()  # Add hospital branding

# Alternate BFHtheme styles available:
# - BFHtheme::theme_bfh_dark() for dark theme
# - BFHtheme::theme_bfh_print() for print-optimized theme
# - BFHtheme::theme_bfh_presentation() for presentations

# Example 15: Danish-friendly unit support (centimeters)
plot_cm <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Plot in Centimeters (Danish Standard)",
  width = 25,   # 25 cm (auto-detected as cm)
  height = 15   # 15 cm
)

# Example 16: Explicit unit specification
plot_explicit <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Explicit Centimeters",
  width = 25, height = 15, units = "cm"
)

# Example 17: Pixel dimensions for web/Shiny
plot_px <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Plot for Web Display",
  width = 800,   # 800 px (auto-detected as px)
  height = 600,  # 600 px
  dpi = 96
)

# Example 18: Backward compatibility (inches still work)
plot_inches <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Legacy Inches Format",
  width = 10,    # 10 inches (auto-detected as in)
  height = 6     # 6 inches
)

# Example 19: Get raw qic data for further analysis
qic_data <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  return.data = TRUE  # Return data.frame instead of plot
)

# Now you can access all qic calculations
head(qic_data)
# Available columns: cl, ucl, lcl, runs.signal, sigma.signal, etc.

# Example 20: Get summary statistics with Danish column names
result <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  chart_title = "Infections - With Summary",
  print.summary = TRUE  # Return list(plot, summary)
)

# Access the plot
result$plot

# Access the summary statistics (Danish column names)
print(result$summary)
# Columns: fase, antal_observationer, anvendelige_observationer,
#          centerlinje, nedre_kontrolgrænse, øvre_kontrolgrænse,
#          længste_løb, antal_kryds, løbelængde_signal, sigma_signal

# Example 21: Get both raw data and summary
result <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  chart_type = "i",
  y_axis_unit = "count",
  part = c(12),  # Split into phases
  return.data = TRUE,
  print.summary = TRUE  # Return list(data, summary)
)

# Access raw qic data
result$data

# Access summary statistics (one row per phase)
result$summary
# fase 1: baseline period
# fase 2: intervention period

# Example 22: Use summary for reporting
result <- create_spc_chart(
  data = data,
  x = month,
  y = infections,
  n = surgeries,
  chart_type = "p",
  y_axis_unit = "percent",
  chart_title = "Infection Rate - Multi-phase Analysis",
  part = c(12),
  print.summary = TRUE
)

# Extract key metrics for reporting
summary_stats <- result$summary
cat("Fase 1 centerlinje:", summary_stats$centerlinje[1], "\%\n")
cat("Fase 2 centerlinje:", summary_stats$centerlinje[2], "\%\n")
cat("Forbedring:", summary_stats$centerlinje[1] - summary_stats$centerlinje[2], "\%-point\n")

if (summary_stats$sigma_signal[2]) {
  cat("VIGTIG: Special cause variation detekteret i fase 2!\n")
}
}
}
\seealso{
\itemize{
\item \code{\link[=bfh_spc_plot]{bfh_spc_plot()}} for low-level plot generation
\item \code{\link[=spc_plot_config]{spc_plot_config()}} for plot configuration
\item \code{\link[=apply_y_axis_formatting]{apply_y_axis_formatting()}} for Y-axis formatting
\item \code{\link[BFHtheme:theme_bfh]{BFHtheme::theme_bfh()}} for BFHtheme styling
\item \code{\link[BFHtheme:add_logo]{BFHtheme::add_logo()}} to add hospital branding
}

Other spc-plotting: 
\code{\link{bfh_spc_plot}()}
}
\concept{spc-plotting}
